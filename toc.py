######################
# author: DeepTrial
# date: 2018-6-13
# Abstract:
# This project is to generate table of contents(toc) for
# markdown file.Generated file is interactive,click on the title,it will
# jump to the right line.
######################

import re,sys,shutil,datetime

HEAD_level=80
TOC='#### Table of contents'
REF='<!-- (toc generated by [DeepTrial](https://github.com/deeptrial/MarkdownTableOfContent)) -->'
END='<!-- This is the mark to help regenerate toc.Please do not change the content by yourself.-->'

def findName(fileName): #split the filename from filepath
    name=fileName.split("/")[-1]
    return name

def backup(fileName): # for safety,we backup your file in backup folder
    ts = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    destf = '.'.join((findName(fileName), ts, 'bak'))
    shutil.copy(fileName, "./backup/"+destf)
    print("[Info]:Backup was created: [%s]" % destf)

def headerWrap(header): # TOC format generation
    lnk_sample = '%s- [%s](#%s)'
    level, headContent = re.findall(r'^(\d+) (.*)', header)[0]
    return lnk_sample%((int(level)-HEAD_level)*'    ', headContent, re.sub(' ','-',headContent).lower())

def writeFile(fileName,headers,lines): # save the generated markdown file.
    with open(fileName, 'w') as f:
        f.write(REF + '\n')
        f.write(TOC + '\n')
        f.write('\n'.join(headers) + '\n')
        f.write(END + '\n')
        f.write(''.join(lines) + '\n')
        f.write('\n\n')


def cleaner(fileName): # erase previous toc
    tocStarter=0
    with open(fileName, 'r',encoding='gbk',errors="ignore") as file:
        lines = file.readlines()
    for index,content in enumerate(lines):
        if re.match(r'<!-+', content):  # find toc mark <!-->
            tocStarter=index
    if tocStarter>0:
        print("[Info]:Find existing TOC,erasing...")
        with open(fileName, 'w') as f:
            f.write('\n')
            f.write(''.join(lines[tocStarter+1:]) + '\n')
            f.write('\n\n')
        print("[Info]:Erased!")


def generate(fileName):
    global HEAD_level
    backup(fileName)
    lines = []
    with open(fileName, 'r',encoding='gbk',errors="ignore") as file:
        lines = file.readlines()
    headers = [e.rstrip() for e in lines if re.match(r'#+', e)]  # find all level headers

    # define header level
    for index,head in enumerate(headers):
        ln = len(re.search(r'^#+',head).group(0))
        HEAD_level = ln if ln < HEAD_level else HEAD_level
        headers[index] = re.sub(r'^#+\s*', str(ln)+' ', head)

    # wrap for jump links
    headers = [headerWrap(h) for h in headers]

    # rewrite markdown file to insert toc
    writeFile(fileName, headers, lines)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(
        """
    Usage:
        python toc.py <path to your markdown file>
        """)
    else:
        processfile = sys.argv[1]
        cleaner(processfile)
        generate(processfile)
